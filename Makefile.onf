# SPDX-FileCopyrightText: 2019-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: Apache-2.0

export CGO_ENABLED=0
export GO111MODULE=on

.PHONY: build

PROM_LABEL_PROXY_VERSION := latest
ONOS_BUILD_VERSION := v1.0.0

build-tools:=$(shell if [ ! -d "./build/build-tools" ]; then cd build && git clone https://github.com/onosproject/build-tools.git; fi)
include ./build/build-tools/make/onf-common.mk

build: # @HELP build the Go binaries and run all validations (default)
build:
	CGO_ENABLED=1 go build -o build/_output/prom-label-proxy ./

test: # @HELP run the unit tests and source code validation
test: build deps linters-plp license
	@go mod vendor
	CGO_ENABLED=1 go test -race github.com/prometheus-community/prom-label-proxy/...

jenkins-test:  # @HELP run the unit tests and source code validation producing a junit style report for Jenkins
jenkins-test: deps linters-plp license # openapi-linters
	CGO_ENABLED=1 TEST_PACKAGES=github.com/prometheus-community/prom-label-proxy/... ./build/build-tools/build/jenkins/make-unit

linters-plp: golang-ci # @HELP examines Go source code and reports coding problems
	@go mod vendor
	golangci-lint run --timeout 5m

prom-label-proxy-docker: # @HELP build prom-label-proxy Docker image
	@go mod vendor
	docker build . -f build/prom-label-proxy/Dockerfile \
		-t onosproject/prom-label-proxy:${PROM_LABEL_PROXY_VERSION}
	@rm -rf vendor

images: # @HELP build all Docker images
images: build prom-label-proxy-docker

kind: # @HELP build Docker images and add them to the currently configured kind cluster
kind: images
	@if [ "`kind get clusters`" = '' ]; then echo "no kind cluster found" && exit 1; fi
	kind load docker-image onosproject/prom-label-proxy:${PROM_LABEL_PROXY_VERSION}
	kind load docker-image onosproject/aether-roc-websocket:${PROM_LABEL_PROXY_VERSION}

all: build images

publish: # @HELP publish version on github and dockerhub
	MAKEFILE=./Makefile.onf ./build/build-tools/publish-version ${VERSION} onosproject/prom-label-proxy

jenkins-publish: # @HELP Jenkins calls this to publish artifacts
	./build/bin/push-images
	MAKEFILE=./Makefile.onf ./build/build-tools/release-merge-commit

clean:: # @HELP remove all the build artifacts
	rm -rf ./build/_output ./vendor ./cmd/prom-label-proxy/prom-label-proxy
	go clean -testcache github.com/onosproject/prom-label-proxy/...

